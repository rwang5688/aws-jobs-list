package com.rwang5688.dal;

import java.io.IOException;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;


@DynamoDBTable(tableName = "PLACEHOLDER_ISSUE_TABLE")
public class Issue {

    private static final String ISSUE_TABLE = System.getenv("ISSUE_TABLE");
	private static final Logger logger = LoggerFactory.getLogger(Issue.class);

    private DynamoDBConnection db_connection;
    private AmazonDynamoDB db;
    private DynamoDBMapper mapper;

    private String task_id;
    private Integer task_issue_number;
    private String issue_key;
    private String issue_certainty;
    private Integer issue_complexity;
    private String file_path;
    private Integer start_line_no;
    private Integer start_column_no;
    private String function_name;
    private String variable_name;
    private String rule_set;
    private String rule_code;
    private String error_code;
    private String message;

    @DynamoDBHashKey(attributeName = "task_id")
    public String getTaskId() {
        return this.task_id;
    }
    public void setTaskId(String task_id) {
        this.task_id = task_id;
    }

    @DynamoDBRangeKey(attributeName = "task_issue_number")
    public Integer getTaskIssueNumber() {
        return this.task_issue_number;
    }
    public void setTaskIssueNumber(Integer task_issue_number) {
        this.task_issue_number = task_issue_number;
    }

    @DynamoDBAttribute(attributeName = "issue_key")
    public String getIssueKey() {
        return this.issue_key;
    }
    public void setIssueKey(String issue_key) {
        this.issue_key = issue_key;
    }

    @DynamoDBAttribute(attributeName = "issue_certainty")
    public String getIssueCertainty() {
        return this.issue_certainty;
    }
    public void setIssueCertainty(String issue_certainty) {
        this.issue_certainty = issue_certainty;
    }

    @DynamoDBAttribute(attributeName = "issue_complexity")
    public Integer getIssueComplexity() {
        return this.issue_complexity;
    }
    public void setIssueComplexity(Integer issue_complexity) {
        this.issue_complexity = issue_complexity;
    }

    @DynamoDBAttribute(attributeName = "file_path")
    public String getFilePath() {
        return this.file_path;
    }
    public void setFilePath(String file_path) {
        this.file_path = file_path;
    }

    @DynamoDBAttribute(attributeName = "start_line_no")
    public Integer getStartLineNo() {
        return this.start_line_no;
    }
    public void setStartLineNo(Integer start_line_no) {
        this.start_line_no = start_line_no;
    }

    @DynamoDBAttribute(attributeName = "start_column_no")
    public Integer getStartColumnNo() {
        return this.start_column_no;
    }
    public void setStartColumnNo(Integer start_column_no) {
        this.start_column_no = start_column_no;
    }

    @DynamoDBAttribute(attributeName = "function_name")
    public String getFunctionName() {
        return this.function_name;
    }
    public void setFunctionName(String function_name) {
        this.function_name = function_name;
    }

    @DynamoDBAttribute(attributeName = "variable_name")
    public String getVariableName() {
        return this.variable_name;
    }
    public void setVariableName(String variable_name) {
        this.variable_name = variable_name;
    }

    @DynamoDBAttribute(attributeName = "rule_set")
    public String getRuleSet() {
        return this.rule_set;
    }
    public void setRuleSet(String rule_set) {
        this.rule_set = rule_set;
    }

    @DynamoDBAttribute(attributeName = "rule_code")
    public String getRuleCode() {
        return this.rule_code;
    }
    public void setRuleCode(String rule_code) {
        this.rule_code = rule_code;
    }

    @DynamoDBAttribute(attributeName = "error_code")
    public String getErrorCode() {
        return this.error_code;
    }
    public void setErrorCode(String error_code) {
        this.error_code = error_code;
    }

    @DynamoDBAttribute(attributeName = "message")
    public String getMessage() {
        return this.message;
    }
    public void setMessage(String message) {
        this.message = message;
    }

    public Issue() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ISSUE_TABLE))
            .build();
        this.db_connection = DynamoDBConnection.getInstance();
        this.db = this.db_connection.getDb();
        this.mapper = this.db_connection.createDbMapper(mapperConfig);
    }

    private String toStringTemplate = null;

    public String toString() {
        if (this.toStringTemplate == null) {
            this.toStringTemplate = "Issue [task_id=%s, task_issue_number=%d, ";
            this.toStringTemplate += "issue_key=%s, issue_certainty=%s, issue_complexity=%d, ";
            this.toStringTemplate += "file_path=%s, start_line_no=%d, start_column_no=%d, ";
            this.toStringTemplate += "function_name=%s, variable_name=%s, ";
            this.toStringTemplate += "rule_set=%s, rule_code=%s, ";
            this.toStringTemplate += "error_code=%s, message=%s]";
        }

        return String.format(toStringTemplate,
                            this.task_id, this.task_issue_number,
                            this.issue_key, this.issue_certainty, this.issue_complexity,
                            this.file_path, this.start_line_no, this.start_column_no,
                            this.function_name, this.variable_name,
                            this.rule_set, this.rule_code,
                            this.error_code, this.message);
    }

    public List<Issue> getTaskIssues(String task_id) throws IOException {
        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(task_id));

        DynamoDBQueryExpression<Issue> queryExp = new DynamoDBQueryExpression<Issue>()
            .withKeyConditionExpression("task_id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Issue> results = this.mapper.query(Issue.class, queryExp);
        for (Issue issue : results) {
            logger.info("Issues - getTaskIssues(): " + issue.toString());
        }
        return results;
    }

}

